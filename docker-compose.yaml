version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka_network

  kafka1:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka1:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - kafka1
    networks:
      - kafka_network

  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - kafka_network

  kibana:
    image: kibana:7.9.1
    container_name: kibana
    environment:
      I18N_LOCALE: fr-FR
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - kafka_network

  producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: producer
    command: ["python", "producer.py"]  # Exécute le script producer.py
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092
    depends_on:
      - kafka1
    networks:
      - kafka_network

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: consumer
    command: ["python", "consumer.py"]  # Exécute le script consumer.py
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092
    depends_on:
      - kafka1
    networks:
      - kafka_network

  nomaly-detector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anomaly-detector
    command: ["python", "anomalies_traitement.py"]
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092
      ELASTICSEARCH_HOST: elasticsearch:9200
    volumes:
      - ./normal_data:/app/normal_data  # Monte le dossier normal_data
    depends_on:
    - kafka1
    - elasticsearch
    networks:
    - kafka_network

networks:
  kafka_network:
    driver: bridge